plugins{
    id 'java'
    id 'maven-publish'
    id 'kr.entree.spigradle' version '2.2.4'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'io.freefair.lombok' version '6.1.0'

}

group = 'aleiv'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {name = 'sonatype'
    url = 'https://oss.sonatype.org/content/groups/public/'
    }
    jcenter()
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://libraries.minecraft.net/' }
    maven { url 'https://plugins.gradle.org/m2' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.aikar.co/content/groups/aikar/' }
    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }



}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'

    //Lombok
    // Use Protocol Lib
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.7.0";
    // MiniMessage
    implementation 'net.kyori:adventure-text-minimessage:4.11.0'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    //ACF
    implementation 'co.aikar:acf-paper:0.5.0-SNAPSHOT'

    //TaskChain
    implementation 'co.aikar:taskchain-bukkit:3.7.2'

    //Caffeine
    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.5'

    //FastInv
    implementation 'fr.mrmicky:FastInv:3.0.2'

    //VaultChat
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    //Paper IO
    compileOnly 'io.papermc:paperlib:1.0.4'

    //Citizens
    // compileOnly 'net.citizensnpcs:citizens-main:2.0.30-SNAPSHOT'
    compileOnly('net.citizensnpcs:citizens-main:2.0.30-SNAPSHOT') {
        exclude group: '*', module: '*'
    }


}

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}
javadoc {
    options.encoding = 'UTF-8'
}
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
shadowJar {
    relocate 'co.aikar.commands', 'shadded.acf'
    relocate 'co.aikar.locales', 'shadded.acf.locales'
    relocate 'acf-minecraft_', 'shadded.acf.properties.acf-minecraft_'
    relocate 'acf-core_', 'shadded.acf.properties.acf-core_'


}

build.dependsOn shadowJar